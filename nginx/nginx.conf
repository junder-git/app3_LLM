user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml application/atom+xml image/svg+xml;
    gzip_min_length 1000;
    gzip_disable "msie6";

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=chat:10m rate=2r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    # IP Whitelist Configuration
    # By default, allow all IPs. Uncomment and modify to restrict access.
    
    # Define whitelist
    # geo $whitelist {
    #     default 0;
    #     
    #     # Allow all IPs (default)
    #     # 0.0.0.0/0 1;
    #     
    #     # Example: Whitelist single IP
    #     # 192.168.1.100 1;
    #     
    #     # Example: Whitelist subnet (CIDR notation)
    #     # 192.168.1.0/24 1;
    #     # 10.0.0.0/8 1;
    #     
    #     # Example: Multiple entries
    #     # 192.168.1.0/24 1;
    #     # 172.16.0.0/12 1;
    #     # 203.0.113.45 1;
    # }
    
    # map $whitelist $limit_access {
    #     0 1;  # Deny if not whitelisted
    #     1 0;  # Allow if whitelisted
    # }

    # Upstream configuration
    upstream quart_backend {
        server quart-app:8000;
        keepalive 32;
    }

    # Cache configuration
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=static_cache:10m 
                     max_size=1g inactive=60m use_temp_path=off;

    # CDN proxy for Bootstrap and other libraries
    location /cdn/ {
        proxy_pass https://cdn.jsdelivr.net/;
        proxy_ssl_server_name on;
        proxy_set_header Host cdn.jsdelivr.net;
        
        # Cache CDN resources for 30 days
        proxy_cache static_cache;
        proxy_cache_valid 200 30d;
        proxy_cache_key "$scheme$proxy_host$request_uri";
        proxy_ignore_headers Cache-Control;
        add_header X-Cache-Status $upstream_cache_status;
        add_header Cache-Control "public, immutable, max-age=2592000";
        
        # Gzip
        gzip on;
        gzip_types text/css application/javascript;
    }

    # Main server block
    server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        
        # IP whitelist check (uncomment to enable)
        # if ($limit_access) {
        #     return 403;
        # }

        # Static content with caching
        location /static/ {
            alias /usr/share/nginx/html/static/;
            expires 30d;
            add_header Cache-Control "public, immutable";
            
            # Enable gzip for static files
            gzip_static on;
            
            # Rate limiting for static content
            limit_req zone=general burst=20 nodelay;
            limit_conn conn_limit 10;
            
            # Specific handling for different file types
            location ~* \.(css|js)$ {
                expires 7d;
                add_header Cache-Control "public, must-revalidate";
            }
            
            location ~* \.(jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 30d;
                add_header Cache-Control "public, immutable";
            }
        }

        # WebSocket endpoint for chat
        location /ws {
            proxy_pass http://quart_backend;
            proxy_http_version 1.1;
            
            # WebSocket headers
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Extended timeouts for AI responses
            proxy_connect_timeout 7200s;
            proxy_send_timeout 7200s;
            proxy_read_timeout 7200s;
            
            # Disable buffering for WebSocket
            proxy_buffering off;
            proxy_cache off;
            
            # Rate limiting for WebSocket connections
            limit_req zone=chat burst=5 nodelay;
            limit_conn conn_limit 5;
        }

        # API endpoints
        location /api/ {
            proxy_pass http://quart_backend;
            proxy_http_version 1.1;
            
            # Headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Extended timeouts for AI API calls
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Rate limiting for API
            limit_req zone=api burst=10 nodelay;
            limit_conn conn_limit 10;
            
            # Disable buffering for streaming responses
            proxy_buffering off;
            
            # CORS headers (adjust as needed)
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
            
            if ($request_method = OPTIONS) {
                return 204;
            }
        }

        # Main application
        location / {
            proxy_pass http://quart_backend;
            proxy_http_version 1.1;
            
            # Headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Connection settings
            proxy_set_header Connection "";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Rate limiting
            limit_req zone=general burst=20 nodelay;
            limit_conn conn_limit 20;
            
            # Cache configuration for GET requests
            proxy_cache static_cache;
            proxy_cache_key $scheme$proxy_host$request_uri;
            proxy_cache_valid 200 302 10m;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            proxy_cache_lock on;
            
            # Disable cache for logged-in users
            proxy_cache_bypass $http_cookie;
            proxy_no_cache $http_cookie;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}