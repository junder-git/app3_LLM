version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: deepseek-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-deepseek}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Web UI Application
  web-ui:
    build: ./web-ui
    container_name: deepseek-web-ui
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_started
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-deepseek}
      POSTGRES_HOST: postgres
      OLLAMA_HOST: ollama
      OLLAMA_PORT: 11434
      # Hardcode the model name to exactly what we want
      MODEL_NAME: deepseek-coder:6.7b-instruct-q5_K_M
      SESSION_SECRET: ${SESSION_SECRET:-changeme_in_production}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin}
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    build: ./nginx
    container_name: deepseek-nginx
    depends_on:
      - web-ui
    ports:
      - "${PORT:-80}:80"
    volumes:
      - ./nginx/static:/usr/share/nginx/html/static
    restart: unless-stopped

  # Ollama Model Server - with model pre-pulled in the Dockerfile
  ollama:
    build: ./ollama
    container_name: deepseek-ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

volumes:
  postgres_data:
  ollama_data: